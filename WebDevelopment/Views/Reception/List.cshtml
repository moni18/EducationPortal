@model PaginatedList<Data.Entities.Models.Hospital.ReceptionViewModel>

@{
    ViewData["Title"] = "Reception List";
}

<h1>Reception List</h1>

@if (User.IsInRole("Patient"))
{
    <p>
        <a asp-action="Create">Create New Reception</a>
    </p>
}

<form asp-controller="Reception" asp-action="List">
    <p>
        Patient name: <input type="text" name="search" value="@ViewData["CurrentFilter"]" />
        <input type="submit" value="Filter" />
        <a asp-action="List">Back to full list</a>
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayName("Id")
            </th>
            <th>
                <a asp-action="List" asp-route-sort="@ViewData["DateSortParam"]" asp-route-filter="@ViewData["CurrentFilter"]">@Html.DisplayName("DateTime")</a>
            </th>
            <th>
                @Html.DisplayName("CabinetNumber")
            </th>
            <th>
                <a asp-action="List" asp-route-sort="@ViewData["DoctorNameSortParam"]" asp-route-filter="@ViewData["CurrentFilter"]">@Html.DisplayName("DoctorName")</a>
            </th>
            <th>
                <a asp-action="List" asp-route-sort="@ViewData["PatientNameSortParam"]" asp-route-filter="@ViewData["CurrentFilter"]">@Html.DisplayName("PatientName")</a>
            </th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CabinetNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DoctorName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PatientName)
                </td>
                @if (!item.IsCompleted)
                {
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id })
                    </td>
                }
                <td>
                    @Html.ActionLink("Details", "Details", new { id = item.Id })
                </td>
                <td>
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="List"
   asp-route-sort="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-filter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="List"
   asp-route-sort="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-filter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>